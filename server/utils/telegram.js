const crypto = require('crypto');
const config = require('../config');

// –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram initData
function validateInitData(initData, botToken) {
  console.log('üîç validateInitData called with:');
  console.log('  - initData:', initData ? 'present' : 'missing');
  console.log('  - botToken:', botToken ? 'present' : 'missing');
  
  if (!initData || !botToken) {
    console.log('‚ùå Missing initData or botToken');
    return false;
  }
  
  const urlParams = new URLSearchParams(initData);
  const hash = urlParams.get('hash');
  console.log('  - hash from initData:', hash ? 'present' : 'missing');
  
  if (!hash) {
    console.log('‚ùå No hash in initData');
    return false;
  }
  
  urlParams.delete('hash');
  const dataCheckString = Array.from(urlParams.entries())
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([key, value]) => `${key}=${value}`)
    .join('\n');
  
  console.log('  - dataCheckString:', dataCheckString);
  
  const secretKey = crypto.createHmac('sha256', 'WebAppData').update(botToken).digest();
  const calculatedHash = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex');
  
  console.log('  - calculatedHash:', calculatedHash);
  console.log('  - providedHash:', hash);
  console.log('  - hashes match:', calculatedHash === hash);
  
  return calculatedHash === hash;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData
function extractUserData(initData) {
  const urlParams = new URLSearchParams(initData);
  const userStr = urlParams.get('user');
  if (!userStr) return null;
  
  try {
    return JSON.parse(userStr);
  } catch (e) {
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DEV —Ä–µ–∂–∏–º–∞
async function authenticateUser(initData, prisma) {
  console.log('Auth attempt with initData:', initData ? 'present' : 'missing');
  console.log('NODE_ENV:', process.env.NODE_ENV);
  
  // DEV —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  if (!initData) {
    console.log('[DEV MODE] Skipping Telegram auth, creating test user');
    try {
      const user = await prisma.user.upsert({
        where: { telegramId: 'dev-test-user' },
        update: {},
        create: {
          telegramId: 'dev-test-user',
          username: 'dev-test-user',
          balance: 10000, // –ë–æ–ª—å—à–æ–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        },
      });
      return {
        id: user.id,
        telegramId: user.telegramId,
        username: user.username || `User${user.telegramId}`,
        avatarUrl: user.avatarUrl,
        balance: user.balance
      };
    } catch (error) {
      console.error('Error during DEV authentication:', error);
      throw new Error('DEV Authentication failed');
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∏ –∞–¥–º–∏–Ω—Å–∫–∏–º —Ç–æ–∫–µ–Ω–∞–º–∏
  const botToken = config.BOT_TOKEN;
  const adminBotToken = config.ADMIN_BOT_TOKEN;
  let isValid = false;
  let userData = null;
  
  if (botToken && validateInitData(initData, botToken)) {
    isValid = true;
    userData = extractUserData(initData);
  } else if (adminBotToken && validateInitData(initData, adminBotToken)) {
    isValid = true;
    userData = extractUserData(initData);
  }
  
  if (!isValid || !userData) {
    throw new Error('Authentication failed: invalid initData');
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
  const user = await prisma.user.upsert({
    where: { telegramId: String(userData.id) },
    update: {
      username: userData.username || undefined,
      avatarUrl: userData.photo_url || undefined,
    },
    create: {
      telegramId: String(userData.id),
      username: userData.username || undefined,
      avatarUrl: userData.photo_url || undefined,
      balance: 1000, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    },
  });
  
  return {
    id: user.id,
    telegramId: user.telegramId,
    username: user.username || `User${user.telegramId}`,
    avatarUrl: user.avatarUrl,
    balance: user.balance
  };
}

module.exports = {
  validateInitData,
  extractUserData,
  authenticateUser
}; 